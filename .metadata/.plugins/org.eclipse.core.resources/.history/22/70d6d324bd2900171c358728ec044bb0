package lambds_part4;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Stream;

public class FunctionUtils {
	public static <T> T firstAllMatch(Stream<T> stream, Predicate<T>... predicates) {
		Predicate<T> predicate = passAllPredicates(predicates);
		return stream.filter(predicate).findFirst().orElse(null);
	}

	private static <T> Predicate<T> passAllPredicates(Predicate<T>... predicates) {
		Predicate<T> result = predicates[0];
		for (int i = 0; i < predicates.length; i++)
			result = result.and(predicates[0]);
		return result;
	}

	private static <T> void testingMethod(Stream<T> stream, Predicate<T>... predicates) {
		System.out.println(firstAllMatch(stream, predicates));
	}

	public static void main(String[] args) {
		List<String> words = Arrays.asList("hello", "hi", "goodbye", "bye", "czternascie");
		testingMethod(words.stream(), word -> word.contains("e"), word -> word.length() > 8);
	}
}
