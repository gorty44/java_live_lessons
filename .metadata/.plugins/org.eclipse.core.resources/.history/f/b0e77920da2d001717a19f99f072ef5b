package junit_tut;

import static org.hamcrest.CoreMatchers.allOf;
import static org.hamcrest.CoreMatchers.anyOf;
import static org.hamcrest.CoreMatchers.both;
import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.everyItem;
import static org.hamcrest.CoreMatchers.hasItems;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.startsWith;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertThat;

import java.util.Arrays;

import org.hamcrest.core.CombinableMatcher;
import org.junit.Test;

public class AssertTests {
	@Test
	public void testAssertArrayEquals() {
		byte[] expected = "trials".getBytes();
		byte[] actual = "trials".getBytes();
		assertArrayEquals("failure - byte arrays not same", expected, actual);
	}

	@Test
	public void testAssertEquals() {
		assertEquals("failure - strings are not equal", "text", "text");
	}

	@Test
	public void testAssertFalse() {
		assertFalse("failure - should be false", false);
	}

	@Test
	public void testAssertNotNull() {
		assertNotNull("should not be null", new Object());
	}

	@Test
	public void testAssertNotSame() {
		// Object v = new Object();
		assertNotSame("Should not be same Object", new Object(), new Object());
	}

	@Test
	public void testAssertNull() {
		assertNull("Should be null", null);
	}

	@Test
	public void testAssertSame() {
		Object v = new Object();
		assertSame("Should be same", v, v);
	}

	// JUnit Matchers assertThat

	@Test
	public void testAssertThatBothContainsString() {
		assertThat("albumen", both(containsString("a")).and(containsString("b")));
	}

	@Test
	public void testAssertThatHasItems() {
		assertThat(Arrays.asList("one", "two", "three"), hasItems("one", "three"));
	}

	@Test
	public void testAssertThatEveryItemContainsString() {
		assertThat(Arrays.asList("foo", "bor", "boz"), everyItem(containsString("o")));
	}

	@Test
	public void testAssertThatHamcrestCoreMatchers() {
		assertThat("good", is(allOf(equalTo("good"), startsWith("good"))));
		assertThat("good", is(not(allOf(equalTo("bad"), equalTo("good")))));
		assertThat("good", is(anyOf(equalTo("bad"), equalTo("good"))));
		assertThat(7, is(not(CombinableMatcher.< Integer > either(equalTo(4)).or(equalTo(3)))));
	}
}
