<?xml version="1.0" encoding="UTF-8"?><testrun name="AssertTests" project="junit_tut" tests="11" started="11" failures="1" errors="0" ignored="0">
  <testsuite name="junit_tut.AssertTests" time="0.101">
    <testcase name="testAssertNotNull" classname="junit_tut.AssertTests" time="0.0"/>
    <testcase name="testAssertNotSame" classname="junit_tut.AssertTests" time="0.0"/>
    <testcase name="testAssertThatHasItems" classname="junit_tut.AssertTests" time="0.032"/>
    <testcase name="testAssertThatEveryItemContainsString" classname="junit_tut.AssertTests" time="0.008"/>
    <testcase name="testAssertFalse" classname="junit_tut.AssertTests" time="0.0"/>
    <testcase name="testAssertThatBothContainsString" classname="junit_tut.AssertTests" time="0.006"/>
    <testcase name="testAssertEquals" classname="junit_tut.AssertTests" time="0.0"/>
    <testcase name="testAssertArrayEquals" classname="junit_tut.AssertTests" time="0.004"/>
    <testcase name="testAssertThatHamcrestCoreMatchers" classname="junit_tut.AssertTests" time="0.048">
      <failure>java.lang.AssertionError: 
Expected: is ("bad" and "good")
     but: "bad" was "good"
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.junit.Assert.assertThat(Assert.java:956)
	at org.junit.Assert.assertThat(Assert.java:923)
	at junit_tut.AssertTests.testAssertThatHamcrestCoreMatchers(AssertTests.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)

</failure>
    </testcase>
    <testcase name="testAssertNull" classname="junit_tut.AssertTests" time="0.0"/>
    <testcase name="testAssertSame" classname="junit_tut.AssertTests" time="0.002"/>
  </testsuite>
</testrun>
